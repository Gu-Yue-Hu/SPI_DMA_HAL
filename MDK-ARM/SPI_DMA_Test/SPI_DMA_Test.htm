<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [SPI_DMA_Test\SPI_DMA_Test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image SPI_DMA_Test\SPI_DMA_Test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Dec 03 16:37:24 2021
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SX1280Init &rArr; SX1280HalInit &rArr; SX1280OnDioIrq &rArr; SX1280ProcessIrqs &rArr; SX1280ClearIrqStatus &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[24]">CEC_CAN_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[6c]">OnRxDone</a> from main.o(i.OnRxDone) referenced from main.o(.data)
 <LI><a href="#[6f]">OnRxError</a> from main.o(i.OnRxError) referenced from main.o(.data)
 <LI><a href="#[6e]">OnRxTimeout</a> from main.o(i.OnRxTimeout) referenced from main.o(.data)
 <LI><a href="#[6b]">OnTxDone</a> from main.o(i.OnTxDone) referenced from main.o(.data)
 <LI><a href="#[6d]">OnTxTimeout</a> from main.o(i.OnTxTimeout) referenced from main.o(.data)
 <LI><a href="#[7]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from stm32f0xx_it.o(i.SPI1_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[29]">SPI_DMAAbortOnError</a> from stm32f0xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f0xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[57]">SX1280Calibrate</a> from sx1280.o(i.SX1280Calibrate) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[56]">SX1280ClearIrqStatus</a> from sx1280.o(i.SX1280ClearIrqStatus) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[36]">SX1280GetFirmwareVersion</a> from sx1280.o(i.SX1280GetFirmwareVersion) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[6a]">SX1280GetFrequencyError</a> from sx1280.o(i.SX1280GetFrequencyError) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[55]">SX1280GetIrqStatus</a> from sx1280.o(i.SX1280GetIrqStatus) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[48]">SX1280GetOpMode</a> from sx1280.o(i.SX1280GetOpMode) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[53]">SX1280GetPacketStatus</a> from sx1280.o(i.SX1280GetPacketStatus) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[50]">SX1280GetPacketType</a> from sx1280.o(i.SX1280GetPacketType) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[42]">SX1280GetPayload</a> from sx1280.o(i.SX1280GetPayload) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[66]">SX1280GetRangingResult</a> from sx1280.o(i.SX1280GetRangingResult) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[54]">SX1280GetRssiInst</a> from sx1280.o(i.SX1280GetRssiInst) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[52]">SX1280GetRxBufferStatus</a> from sx1280.o(i.SX1280GetRxBufferStatus) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[2c]">SX1280GetStatus</a> from sx1280.o(i.SX1280GetStatus) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[35]">SX1280HalGetDioStatus</a> from sx1280_hal.o(i.SX1280HalGetDioStatus) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[34]">SX1280HalReadBuffer</a> from sx1280_hal.o(i.SX1280HalReadBuffer) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[2e]">SX1280HalReadCommand</a> from sx1280_hal.o(i.SX1280HalReadCommand) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[32]">SX1280HalReadRegister</a> from sx1280_hal.o(i.SX1280HalReadRegister) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[31]">SX1280HalReadRegisters</a> from sx1280_hal.o(i.SX1280HalReadRegisters) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[2b]">SX1280HalReset</a> from sx1280_hal.o(i.SX1280HalReset) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[33]">SX1280HalWriteBuffer</a> from sx1280_hal.o(i.SX1280HalWriteBuffer) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[2d]">SX1280HalWriteCommand</a> from sx1280_hal.o(i.SX1280HalWriteCommand) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[30]">SX1280HalWriteRegister</a> from sx1280_hal.o(i.SX1280HalWriteRegister) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[2f]">SX1280HalWriteRegisters</a> from sx1280_hal.o(i.SX1280HalWriteRegisters) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[2a]">SX1280Init</a> from sx1280.o(i.SX1280Init) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[70]">SX1280OnDioIrq</a> from sx1280.o(i.SX1280OnDioIrq) referenced from sx1280.o(.data)
 <LI><a href="#[68]">SX1280RangingClearFilterResult</a> from sx1280.o(i.SX1280RangingClearFilterResult) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[69]">SX1280RangingSetFilterNumSamples</a> from sx1280.o(i.SX1280RangingSetFilterNumSamples) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[43]">SX1280SendPayload</a> from sx1280.o(i.SX1280SendPayload) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[5a]">SX1280SetAutoFS</a> from sx1280.o(i.SX1280SetAutoFS) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[59]">SX1280SetAutoTx</a> from sx1280.o(i.SX1280SetAutoTx) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[5f]">SX1280SetBleAccessAddress</a> from sx1280.o(i.SX1280SetBleAccessAddress) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[60]">SX1280SetBleAdvertizerAccessAddress</a> from sx1280.o(i.SX1280SetBleAdvertizerAccessAddress) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[3d]">SX1280SetBufferBaseAddresses</a> from sx1280.o(i.SX1280SetBufferBaseAddresses) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[4d]">SX1280SetCad</a> from sx1280.o(i.SX1280SetCad) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[51]">SX1280SetCadParams</a> from sx1280.o(i.SX1280SetCadParams) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[61]">SX1280SetCrcPolynomial</a> from sx1280.o(i.SX1280SetCrcPolynomial) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[5e]">SX1280SetCrcSeed</a> from sx1280.o(i.SX1280SetCrcSeed) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[64]">SX1280SetDeviceRangingAddress</a> from sx1280.o(i.SX1280SetDeviceRangingAddress) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[3f]">SX1280SetDioIrqParams</a> from sx1280.o(i.SX1280SetDioIrqParams) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[4a]">SX1280SetFs</a> from sx1280.o(i.SX1280SetFs) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[46]">SX1280SetInterruptMode</a> from sx1280.o(i.SX1280SetInterruptMode) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[5b]">SX1280SetLongPreamble</a> from sx1280.o(i.SX1280SetLongPreamble) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[3a]">SX1280SetModulationParams</a> from sx1280.o(i.SX1280SetModulationParams) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[3b]">SX1280SetPacketParams</a> from sx1280.o(i.SX1280SetPacketParams) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[39]">SX1280SetPacketType</a> from sx1280.o(i.SX1280SetPacketType) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[5c]">SX1280SetPayload</a> from sx1280.o(i.SX1280SetPayload) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[45]">SX1280SetPollingMode</a> from sx1280.o(i.SX1280SetPollingMode) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[67]">SX1280SetRangingCalibration</a> from sx1280.o(i.SX1280SetRangingCalibration) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[63]">SX1280SetRangingIdLength</a> from sx1280.o(i.SX1280SetRangingIdLength) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[65]">SX1280SetRangingRequestAddress</a> from sx1280.o(i.SX1280SetRangingRequestAddress) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[44]">SX1280SetRangingRole</a> from sx1280.o(i.SX1280SetRangingRole) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[47]">SX1280SetRegistersDefault</a> from sx1280.o(i.SX1280SetRegistersDefault) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[37]">SX1280SetRegulatorMode</a> from sx1280.o(i.SX1280SetRegulatorMode) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[3c]">SX1280SetRfFrequency</a> from sx1280.o(i.SX1280SetRfFrequency) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[41]">SX1280SetRx</a> from sx1280.o(i.SX1280SetRx) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[4c]">SX1280SetRxDutyCycle</a> from sx1280.o(i.SX1280SetRxDutyCycle) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[58]">SX1280SetSaveContext</a> from sx1280.o(i.SX1280SetSaveContext) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[49]">SX1280SetSleep</a> from sx1280.o(i.SX1280SetSleep) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[38]">SX1280SetStandby</a> from sx1280.o(i.SX1280SetStandby) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[40]">SX1280SetSyncWord</a> from sx1280.o(i.SX1280SetSyncWord) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[5d]">SX1280SetSyncWordErrorTolerance</a> from sx1280.o(i.SX1280SetSyncWordErrorTolerance) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[4b]">SX1280SetTx</a> from sx1280.o(i.SX1280SetTx) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[4f]">SX1280SetTxContinuousPreamble</a> from sx1280.o(i.SX1280SetTxContinuousPreamble) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[4e]">SX1280SetTxContinuousWave</a> from sx1280.o(i.SX1280SetTxContinuousWave) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[3e]">SX1280SetTxParams</a> from sx1280.o(i.SX1280SetTxParams) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[62]">SX1280SetWhiteningSeed</a> from sx1280.o(i.SX1280SetWhiteningSeed) referenced from sx1280_hal.o(.constdata)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[23]">USART3_4_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[71]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ae]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[af]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegisters
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteBuffer
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadCommand
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadBuffer
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetPacketStatus
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetFrequencyError
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetFrequencyError
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetFrequencyError
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
</UL>

<P><STRONG><a name="[ba]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[77]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[72]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[93]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>HAL_DMA_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[85]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReset
</UL>

<P><STRONG><a name="[87]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWaitOnBusy
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalGetDioStatus
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MY_TransmitReceive_DMA
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReset
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SendPayload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ProcessIrqs
</UL>

<P><STRONG><a name="[86]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[a9]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[88]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[8a]"></a>HAL_MspInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[90]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[91]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 966 bytes, Stack size 32 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[94]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>HAL_SPI_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_SPI_MY_TransmitReceive_DMA</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, spi.o(i.HAL_SPI_MY_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIn
</UL>

<P><STRONG><a name="[96]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>MX_DMA_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>MX_GPIO_Init</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OnRxDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.OnRxDone))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>OnRxError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.OnRxError))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>OnRxTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.OnRxTimeout))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>OnTxDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.OnTxDone))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>OnTxTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.OnTxTimeout))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SX1280Calibrate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sx1280.o(i.SX1280Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1280Calibrate &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>SX1280ClearIrqStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1280.o(i.SX1280ClearIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280ClearIrqStatus &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetTx
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ProcessIrqs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>SX1280GetFirmwareVersion</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1280.o(i.SX1280GetFirmwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1280GetFirmwareVersion &rArr; SX1280HalReadRegister &rArr; SX1280HalReadRegisters &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>SX1280GetFrequencyError</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sx1280.o(i.SX1280GetFrequencyError))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1280GetFrequencyError &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280complement2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegister
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetLoRaBandwidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>SX1280GetIrqStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1280.o(i.SX1280GetIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1280GetIrqStatus &rArr; SX1280HalReadCommand &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ProcessIrqs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>SX1280GetLoRaBandwidth</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sx1280.o(i.SX1280GetLoRaBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetFrequencyError
</UL>

<P><STRONG><a name="[48]"></a>SX1280GetOpMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1280.o(i.SX1280GetOpMode))
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>SX1280GetPacketStatus</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, sx1280.o(i.SX1280GetPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1280GetPacketStatus &rArr; SX1280HalReadCommand &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>SX1280GetPacketType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1280.o(i.SX1280GetPacketType))
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>SX1280GetPayload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1280.o(i.SX1280GetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1280GetPayload &rArr; SX1280GetRxBufferStatus &rArr; SX1280HalReadRegister &rArr; SX1280HalReadRegisters &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadBuffer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRxBufferStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>SX1280GetRangingResult</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, sx1280.o(i.SX1280GetRangingResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1280GetRangingResult &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280complement2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegister
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetStandby
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetLoRaBandwidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>SX1280GetRssiInst</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sx1280.o(i.SX1280GetRssiInst))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1280GetRssiInst &rArr; SX1280HalReadCommand &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>SX1280GetRxBufferStatus</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1280.o(i.SX1280GetRxBufferStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1280GetRxBufferStatus &rArr; SX1280HalReadRegister &rArr; SX1280HalReadRegisters &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegister
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetPayload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>SX1280GetStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1280.o(i.SX1280GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1280GetStatus &rArr; SX1280HalReadCommand &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>SX1280HalGetDioStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1280_hal.o(i.SX1280HalGetDioStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1280HalGetDioStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>SX1280HalInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1280_hal.o(i.SX1280HalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1280HalInit &rArr; SX1280OnDioIrq &rArr; SX1280ProcessIrqs &rArr; SX1280ClearIrqStatus &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280OnDioIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Init
</UL>

<P><STRONG><a name="[34]"></a>SX1280HalReadBuffer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sx1280_hal.o(i.SX1280HalReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1280HalReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetPayload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>SX1280HalReadCommand</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sx1280_hal.o(i.SX1280HalReadCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1280HalReadCommand &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetStatus
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRxBufferStatus
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRssiInst
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetPacketStatus
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetIrqStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>SX1280HalReadRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1280_hal.o(i.SX1280HalReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1280HalReadRegister &rArr; SX1280HalReadRegisters &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetSyncWordErrorTolerance
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRangingIdLength
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280RangingClearFilterResult
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRxBufferStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetFrequencyError
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetFirmwareVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>SX1280HalReadRegisters</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sx1280_hal.o(i.SX1280HalReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1280HalReadRegisters &rArr; SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>SX1280HalReset</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sx1280_hal.o(i.SX1280HalReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1280HalReset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>SX1280HalWaitOnBusy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx1280_hal.o(i.SX1280HalWaitOnBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1280HalWaitOnBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegisters
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteBuffer
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadCommand
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadBuffer
</UL>

<P><STRONG><a name="[33]"></a>SX1280HalWriteBuffer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sx1280_hal.o(i.SX1280HalWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1280HalWriteBuffer &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetPayload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>SX1280HalWriteCommand</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx1280_hal.o(i.SX1280HalWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetTxParams
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetTxContinuousWave
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetTxContinuousPreamble
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetTx
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetStandby
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetSleep
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetSaveContext
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRxDutyCycle
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRx
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRfFrequency
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRegulatorMode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRangingRole
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetPacketType
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetPacketParams
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetModulationParams
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetLongPreamble
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetFs
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetDioIrqParams
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetCadParams
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetCad
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetBufferBaseAddresses
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetAutoTx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetAutoFS
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ClearIrqStatus
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Calibrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>SX1280HalWriteRegister</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx1280_hal.o(i.SX1280HalWriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetWhiteningSeed
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetSyncWordErrorTolerance
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRegistersDefault
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRangingIdLength
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRangingCalibration
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetBleAccessAddress
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280RangingSetFilterNumSamples
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280RangingClearFilterResult
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>SX1280HalWriteRegisters</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1280_hal.o(i.SX1280HalWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetSyncWord
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRangingRequestAddress
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetDeviceRangingAddress
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetCrcSeed
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetCrcPolynomial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>SX1280Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1280.o(i.SX1280Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1280Init &rArr; SX1280HalInit &rArr; SX1280OnDioIrq &rArr; SX1280ProcessIrqs &rArr; SX1280ClearIrqStatus &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>SX1280OnDioIrq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1280.o(i.SX1280OnDioIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1280OnDioIrq &rArr; SX1280ProcessIrqs &rArr; SX1280ClearIrqStatus &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ProcessIrqs
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>SX1280ProcessIrqs</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, sx1280.o(i.SX1280ProcessIrqs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1280ProcessIrqs &rArr; SX1280ClearIrqStatus &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetIrqStatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ClearIrqStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280OnDioIrq
</UL>

<P><STRONG><a name="[68]"></a>SX1280RangingClearFilterResult</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1280.o(i.SX1280RangingClearFilterResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280RangingClearFilterResult &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>SX1280RangingSetFilterNumSamples</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx1280.o(i.SX1280RangingSetFilterNumSamples))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1280RangingSetFilterNumSamples &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>SX1280SendPayload</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SendPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1280SendPayload &rArr; SX1280SetTx &rArr; SX1280SetRangingRole &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetTx
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetPayload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>SX1280SetAutoFS</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetAutoFS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetAutoFS &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>SX1280SetAutoTx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetAutoTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetAutoTx &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>SX1280SetBleAccessAddress</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetBleAccessAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1280SetBleAccessAddress &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetBleAdvertizerAccessAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>SX1280SetBleAdvertizerAccessAddress</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetBleAdvertizerAccessAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetBleAdvertizerAccessAddress &rArr; SX1280SetBleAccessAddress &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetBleAccessAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>SX1280SetBufferBaseAddresses</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetBufferBaseAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetBufferBaseAddresses &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>SX1280SetCad</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetCad &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>SX1280SetCadParams</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetCadParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetCadParams &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>SX1280SetCrcPolynomial</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetCrcPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1280SetCrcPolynomial &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>SX1280SetCrcSeed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetCrcSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1280SetCrcSeed &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>SX1280SetDeviceRangingAddress</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetDeviceRangingAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1280SetDeviceRangingAddress &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>SX1280SetDioIrqParams</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sx1280.o(i.SX1280SetDioIrqParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetDioIrqParams &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>SX1280SetFs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetFs &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>SX1280SetInterruptMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1280.o(i.SX1280SetInterruptMode))
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>SX1280SetLongPreamble</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetLongPreamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetLongPreamble &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>SX1280SetModulationParams</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetModulationParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetModulationParams &rArr; SX1280SetPacketType &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetPacketType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>SX1280SetPacketParams</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetPacketParams &rArr; SX1280SetPacketType &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetPacketType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>SX1280SetPacketType</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetPacketType &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetPacketParams
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetModulationParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>SX1280SetPayload</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1280SetPayload &rArr; SX1280HalWriteBuffer &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SendPayload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>SX1280SetPollingMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1280.o(i.SX1280SetPollingMode))
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>SX1280SetRangingCalibration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetRangingCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1280SetRangingCalibration &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>SX1280SetRangingIdLength</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetRangingIdLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetRangingIdLength &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>SX1280SetRangingRequestAddress</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetRangingRequestAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1280SetRangingRequestAddress &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>SX1280SetRangingRole</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetRangingRole))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetRangingRole &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetTx
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>SX1280SetRegistersDefault</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetRegistersDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetRegistersDefault &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>SX1280SetRegulatorMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetRegulatorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetRegulatorMode &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>SX1280SetRfFrequency</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetRfFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetRfFrequency &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>SX1280SetRx</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetRx &rArr; SX1280SetRangingRole &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRangingRole
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ClearIrqStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>SX1280SetRxDutyCycle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1280SetRxDutyCycle &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>SX1280SetSaveContext</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetSaveContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetSaveContext &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>SX1280SetSleep</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1280SetSleep &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>SX1280SetStandby</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetStandby &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>SX1280SetSyncWord</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1280SetSyncWord &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>SX1280SetSyncWordErrorTolerance</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetSyncWordErrorTolerance))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetSyncWordErrorTolerance &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>SX1280SetTx</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx1280.o(i.SX1280SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1280SetTx &rArr; SX1280SetRangingRole &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SetRangingRole
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ClearIrqStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280SendPayload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>SX1280SetTxContinuousPreamble</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetTxContinuousPreamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetTxContinuousPreamble &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>SX1280SetTxContinuousWave</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetTxContinuousWave &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>SX1280SetTxParams</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetTxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1280SetTxParams &rArr; SX1280HalWriteCommand &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>SX1280SetWhiteningSeed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1280.o(i.SX1280SetWhiteningSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1280SetWhiteningSeed &rArr; SX1280HalWriteRegister &rArr; SX1280HalWriteRegisters &rArr; SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280_hal.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>SpiIn</STRONG> (Thumb, 20 bytes, Stack size 72 bytes, sx1280_hal.o(i.SpiIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SpiIn &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteRegisters
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteCommand
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalWriteBuffer
</UL>

<P><STRONG><a name="[a4]"></a>SpiInOut</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1280_hal.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SpiInOut &rArr; HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MY_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadRegisters
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadCommand
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280HalReadBuffer
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SystemClock_Config</STRONG> (Thumb, 74 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a8]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280ProcessIrqs
</UL>

<P><STRONG><a name="[bd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[be]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[bf]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MY_TransmitReceive_DMA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f0xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[81]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[8e]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[a0]"></a>SX1280complement2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1280.o(i.SX1280complement2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1280complement2
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetRangingResult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280GetFrequencyError
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
